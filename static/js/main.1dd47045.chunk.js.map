{"version":3,"sources":["utils/api.js","utils/getQueryObject.js","components/context.js","components/Alert.js","components/SelectBox.js","components/FilterBox.js","components/Filters.js","components/CharComponent.js","components/CharsView.js","components/SelectedFiltersAndSearch.js","components/RightSide.js","components/App.js","components/Root.js","serviceWorker.js","index.js"],"names":["getCharacter","param","Promise","resolve","query","console","log","url","fetch","then","res","json","currentQuery","queryArray","split","queryObj","filterArray","length","getQueryText","queryText","counter","Object","entries","key","value","Context","React","createContext","AlertExample","state","useContext","Alert","className","isOpen","visibleAlert","toggle","dispatch","type","error","SelectBox","title","checkit","selectorName","name","onChange","e","map","no","FilterBox","checkboxName","a","isValue","target","assign","toLowerCase","apiResponse","prototype","hasOwnProperty","call","payload","info","next","prev","isNext","Label","Filters","useState","BoxData","keys","index","CharComponent","chardata","style","position","src","image","alt","width","bottom","id","Date","getFullYear","created","status","species","gender","location","CharsView","results","Fragment","SelectedFiltersAndSearch","RightSide","App","Container","Row","Col","xs","sm","reducer","action","queryString","obj","page","Root","useReducer","useEffect","resp","Provider","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1dd47045.chunk.js","sourcesContent":["export function getCharacter(param) {\n  return new Promise((resolve) => {\n    let query =  `page=1`;\n    if (param) query = param;\n    console.log(query);\n    const url = `https://rickandmortyapi.com/api/character/?${query}`;\n      fetch(url).then((res) => resolve(res.json()))\n  })\n}","export var query = function(currentQuery) {\n    const queryArray = currentQuery.split('&');\n    let queryObj = {};\n    for(const element of queryArray){\n      const filterArray = element.split('=');\n      if(filterArray.length === 2) queryObj[filterArray[0]] = filterArray[1];\n    }\n    return queryObj;\n  };\n \nexport const getQueryText = (currentQuery) => {\n  let queryText ='';\n  let counter = 0;\n  for(const [key,value] of Object.entries(currentQuery)){\n      queryText +=`${counter === 0 ? '':'&'}${key}=${value}`;\n      counter += 1;\n  }\n  return queryText;\n};","import React from 'react';\n\nexport const Context = React.createContext({});","import React, { useContext } from 'react';\nimport { Alert } from 'reactstrap';\nimport { Context } from './context';\n\nconst AlertExample = () => { \n    const state = useContext(Context);  \n    console.log(state.state);\n    const onDismiss = () => state.dispatch({type:'dismissError', error:''});\n    return (\n        <Alert className=\"custom-alert-danger\" isOpen={state.state.visibleAlert} toggle={onDismiss}>\n        {state.state.error}\n        </Alert>\n    );\n}\n\nexport default AlertExample;","import React from 'react';\n\nconst SelectBox = ({title, checkit, selectorName}) => {\n    return(\n        <select name={title} onChange={(e) => {checkit(e)}}>\n            <option value=\"\">Please select</option>\n            {selectorName.map((name, no) => <option key = {no} value={name} >{name} </option>)}\n        </select>\n    )\n}\n\nexport default SelectBox;","import React,{ useContext } from 'react';\nimport { Label } from 'reactstrap';\nimport { Context } from './context';\nimport {getCharacter} from '../utils/api';\nimport {getQueryText} from '../utils/getQueryObject';\nimport SelectBox from './SelectBox';\n\nconst FilterBox = ({title, checkboxName}) => {\n    const state = useContext(Context);\n    const checkit = async(e) => {\n        const isValue = e.target.value;\n        const currentQuery = Object.assign({}, state.state.currentQuery);\n        if(isValue) currentQuery[title.toLowerCase()] = e.target.value.toLowerCase();\n        else  delete currentQuery[title.toLowerCase()]\n        const queryText = getQueryText(currentQuery);\n        const apiResponse = await getCharacter(queryText);\n        if(Object.prototype.hasOwnProperty.call(apiResponse,'error')) {\n            console.log(apiResponse.error);\n            state.dispatch({type:'showError', error:apiResponse.error});\n            // const error = apiResponse.error;\n        }else {\n            state.dispatch({\n                type:'update',\n                payload:apiResponse,\n                query:apiResponse.info.next !== null ? \n                apiResponse.info.next.split('?')\n                :\n                apiResponse.info.prev.split('?'),\n                isNext:apiResponse.info.next !== null ? true : false,\n            });\n        }\n    }\n    return(\n        <div className=\"filter\">\n        <Label className=\"title d-block\">{title}</Label>\n        <SelectBox title={title} selectorName={checkboxName} checkit={(e) => {checkit(e)}} />\n        </div>\n    )\n}\nexport default FilterBox;","import React, { useState } from 'react';\nimport FilterBox from './FilterBox'\nimport { Label } from 'reactstrap';\n\nconst Filters = () => {\n    const [BoxData] = useState({'Species':['Human','Mytholog','Other Species...'],'Gender':['Male','FeMale'], 'Origin':['Unknown', 'Post-Apocalyptic Earth', 'Nuptia', 'Other Origins...']});\n    \n    return(\n        <div className=\"box\">\n            <Label className=\"title\"> Filters </Label>\n            {\n                Object.keys(BoxData).map((value,index)=> {return <FilterBox key={index} title={value} checkboxName={BoxData[value]} />})\n\n            }\n        </div>\n    )\n}\nexport default Filters;","import React from 'react';\n\nconst CharComponent = ({chardata}) => {\n    return(\n        <div className=\"d-flex flex-column charbox\">\n            <div style={{position:'relative'}}>\n                <img src={chardata.image} alt=\"charimg\" width=\"100%\" className=\"charimage\"/>\n                <div style={{position: 'absolute', bottom: '0'}} className=\"imagebtmtext px-2\">\n                    <div className=\"charName\">{chardata.name}</div>\n                    <div className=\"subdetails\"><span>{`id : ${chardata.id} - created ${new Date().getFullYear() - new Date(chardata.created).getFullYear()} year ago`}</span></div>\n                </div>\n            </div>\n            <ul className=\"charlist\">\n                <li className=\"listline\">\n                    <div className=\"headingName\">STATUS</div>\n                    <div className=\"listdata\">{chardata.status}</div>\n                </li>\n                <li className=\"listline\">\n                    <div className=\"headingName\">SPECIES</div>\n                    <div className=\"listdata\">{chardata.species}</div>\n                </li>\n                <li className=\"listline\">\n                    <div className=\"headingName\">GENDER</div>\n                    <div className=\"listdata\">{chardata.gender}</div>\n                </li>\n                <li className=\"listline\">\n                    <div className=\"headingName\">LAST LOCATION</div>\n                    <div className=\"listdata\">{chardata.location.name}</div>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default CharComponent;","import React, {useContext} from 'react';\nimport CharComponent from './CharComponent';\nimport { Context } from './context'; \n\nconst CharsView = () => {\n    const state = useContext(Context);\n    return( \n        <div className=\"list\">\n            {state.state.payload?.results.map((chardata,key)=> {return(\n                <React.Fragment key={key}>\n                    <CharComponent chardata={chardata}/>\n                </React.Fragment >\n            )})\n            }   \n        </div>\n        )\n}\n\nexport default CharsView;","import React from 'react';\nimport { Label } from 'reactstrap';\n\nconst SelectedFiltersAndSearch = () => {\n    return(\n        <div className=\"rightDashboard\">\n            <Label className=\"title\">Selected Filters </Label>\n        </div>\n    )\n}\n\nexport default SelectedFiltersAndSearch;","import React from 'react';\nimport CharsView from './CharsView';\nimport SelectedFiltersAndSearch from './SelectedFiltersAndSearch';\nconst RightSide = () => {\n    return(\n        <>\n            <SelectedFiltersAndSearch />\n            <CharsView />\n        </>\n    )\n}\n\nexport default RightSide;","import React from 'react';\nimport { Container ,Row, Col } from 'reactstrap';\nimport Filters from './Filters';\nimport RightSide from './RightSide';\n\nimport '../css/App.css';\n\nfunction App() {    \n    return (\n        <div className=\"App\">\n            <Container>\n                <Row>\n                    <Col xs=\"12\" sm=\"2\" className=\"leftDashboard\">\n                        <Filters />\n                    </Col>\n                    <Col xs=\"12\" sm=\"10\">\n                        <RightSide />\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import React, { useEffect, useReducer } from 'react';\nimport {getCharacter} from '../utils/api';\nimport {query} from '../utils/getQueryObject';\nimport AlertExample from './Alert';\nimport App from './App';\nimport { Context } from './context'; \n\nfunction reducer( state , action ) {\n  let queryString;\n  let obj;\n  switch( action.type ){\n    case 'init' :\n      queryString = action.query.length === 2 ? action.query[1]:null;\n      if (queryString) obj  = query(queryString);\n      if(Object.prototype.hasOwnProperty.call(obj,'page')) obj.page -= 1; \n      return {...state,payload : action.payload, currentQuery: obj, visibleAlert: false, error:'' };\n    case 'update' : \n      queryString = action.query.length === 2 ? action.query[1]:null;\n      if (queryString) obj  = query(queryString);\n      if(Object.prototype.hasOwnProperty.call(obj,'page')) {\n        if(action.isNext) obj.page -= 1 \n        else obj.page += 1;\n      } \n      return {...state,payload : action.payload, currentQuery: obj};\n    case 'dismissError' : \n      return {...state, visibleAlert: false, error:''};  \n    case 'showError' :\n      return {...state, visibleAlert: true, error: action.error}  \n    default:\n      return state;  \n  }\n};\n \nfunction Root () {\n  const [state, dispatch] = useReducer( reducer, {} );\n  useEffect(() => {\n    (async function(){\n      const resp = await getCharacter();\n      dispatch({type:'init',payload:resp,query:resp.info.next.split('?')});\n    })();\n  },[]);\n\n  return(\n    <div>\n      <Context.Provider value={{state,dispatch}} >\n        <AlertExample />\n        <App />\n      </Context.Provider>\n    </div>\n  )\n}\n\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Root from './components/Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}